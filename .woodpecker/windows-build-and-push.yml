---
labels:
  platform: windows/amd64
  backend: local

depends_on:
  - lint
  - windows-build-and-push-plugins
  - windows-build-and-push-base

matrix:
  agent:
    - 2.8.0

steps:
  - name: configure
    image: bash.exe
    environment:
      DOCKER_REGISTRY:
        from_secret: DOCKER_REGISTRY
    commands:
      - cd ./build
      - cp .env.sample .env
      - sed -e "s;^DOCKER_REGISTRY=.*;DOCKER_REGISTRY=$${DOCKER_REGISTRY}/${CI_REPO_OWNER,,};" -i .env
    when:
      event: push

  - name: configure
    image: bash.exe
    environment:
      DOCKER_REGISTRY:
        from_secret: DOCKER_REGISTRY
      DOCKER_REGISTRY_USERNAME:
        from_secret: DOCKER_REGISTRY_USERNAME
      DOCKER_REGISTRY_PASSWORD:
        from_secret: DOCKER_REGISTRY_PASSWORD
    commands:
      - cd ./build
      - cp .env.sample .env
      - sed -e "s;^DOCKER_REGISTRY=.*;DOCKER_REGISTRY=$${DOCKER_REGISTRY}/${CI_REPO_OWNER,,};" -i .env
      - echo "$${DOCKER_REGISTRY_PASSWORD}" | docker login $${DOCKER_REGISTRY} --username $${DOCKER_REGISTRY_USERNAME} --password-stdin
    when:
      event: tag

  - name: build
    image: bash.exe
    commands:
      - cd ./build
      - docker-compose build agent-${agent}
    when:
      event: [push, tag]

  - name: push
    image: bash.exe
    commands:
      - cd ./build
      - docker-compose push agent-${agent}
    when:
      event: tag

  - name: clean
    image: bash.exe
    commands:
      - echo "Remove all stopped containers..."
      - docker rm $(docker ps --filter "status=exited" -q) 2> /dev/null || true
      - echo "Remove all unused images..."
      - docker image rm $(docker images --filter "dangling=true" -q --no-trunc) 2> /dev/null || true
      - echo "Remove Woodpecker volumes..."
      - docker volume rm $(docker volume ls --filter name=^wp_* --filter dangling=true  -q) 2> /dev/null || true
    when:
      event: [push, tag]
